/*
 * Copyright (c) 2010, 2011, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.oracle.labs.ajtrace;

/** This defines the format of data generated by the Trace aspect in an abstract way.
 * A concrete implementation of this class chooses some specific format.
 *
 * init(t)                           initialize trace system at start time t
 * fini(t)                           finish tracing
 * defineThread(s, n)       define short name s for thread n
 * defineMethod(s, n)      define short name s for method n
 * defineParam(s, n)       define short name s for param/result n
 * enter(d, t, th, m, t, a)    entry to method m in thread th at time t stack depth d (optional args a)
 * exit(d, t, th, m, r)         exit from method m in thread th at time t stack depth d (optional result r)
 * exit(d, t, th, m)            exit from method m in thread th at time t stack depth d void result
 * call(d, t, th, a)             call to method in thread t at depth d (optional args a)
 *
 * @author Mick Jordan
*/

public abstract class AJTraceLog {
	public abstract void init(long startTime);
	public abstract void fini(long endTime);
	public abstract void defineThread(long id, String fullName);
	public abstract void defineMethod(int id, String fullName);
	public abstract void defineParam(int id, String fullName);
	public abstract void enter(int depth, long tod, long user, long sys, long threadId, int methodId, Object target, boolean isCons, Object[] args);
	public abstract void exit(int depth, long tod, long user, long sys, long threadId, int methodId, Object result);
	public abstract void exit(int depth, long tod, long user, long sys, long threadId, int methodId);
	public abstract void call(int depth, long tod, long threadId, long methodId, Object target, Object[] args);
}
