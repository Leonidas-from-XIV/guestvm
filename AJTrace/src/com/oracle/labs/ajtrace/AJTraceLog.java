/*
 * Copyright (c) 2009 Sun Microsystems, Inc., 4150 Network Circle, Santa
 * Clara, California 95054, U.S.A. All rights reserved.
 *
 * U.S. Government Rights - Commercial software. Government users are
 * subject to the Sun Microsystems, Inc. standard license agreement and
 * applicable provisions of the FAR and its supplements.
 *
 * Use is subject to license terms.
 *
 * This distribution may include materials developed by third parties.
 *
 * Parts of the product may be derived from Berkeley BSD systems,
 * licensed from the University of California. UNIX is a registered
 * trademark in the U.S.  and in other countries, exclusively licensed
 * through X/Open Company, Ltd.
 *
 * Sun, Sun Microsystems, the Sun logo and Java are trademarks or
 * registered trademarks of Sun Microsystems, Inc. in the U.S. and other
 * countries.
 *
 * This product is covered and controlled by U.S. Export Control laws and
 * may be subject to the export or import laws in other
 * countries. Nuclear, missile, chemical biological weapons or nuclear
 * maritime end uses or end users, whether direct or indirect, are
 * strictly prohibited. Export or reexport to countries subject to
 * U.S. embargo or to entities identified on U.S. export exclusion lists,
 * including, but not limited to, the denied persons and specially
 * designated nationals lists is strictly prohibited.
 *
 */
package com.oracle.labs.ajtrace;

/** This defines the format of data generated by the Trace aspect in an abstract way.
 * A concrete implementation of this class chooses some specific format.
 *
 * init(t)                           initialize trace system at start time t
 * fini(t)                           finish tracing
 * defineThread(s, n)       define short name s for thread n
 * defineMethod(s, n)      define short name s for method n
 * defineParam(s, n)       define short name s for param/result n
 * enter(d, t, th, m, t, a)    entry to method m in thread th at time t stack depth d (optional args a)
 * exit(d, t, th, m, r)         exit from method m in thread th at time t stack depth d (optional result r)
 * exit(d, t, th, m)            exit from method m in thread th at time t stack depth d void result
 * call(d, t, th, a)             call to method in thread t at depth d (optional args a)
 *
 * @author Mick Jordan
*/

public abstract class AJTraceLog {
	public abstract void init(long startTime);
	public abstract void fini(long endTime);
	public abstract void defineThread(long id, String fullName);
	public abstract void defineMethod(int id, String fullName);
	public abstract void defineParam(int id, String fullName);
	public abstract void enter(int depth, long tod, long user, long sys, long threadId, int methodId, Object target, boolean isCons, Object[] args);
	public abstract void exit(int depth, long tod, long user, long sys, long threadId, int methodId, Object result);
	public abstract void exit(int depth, long tod, long user, long sys, long threadId, int methodId);
	public abstract void call(int depth, long tod, long threadId, long methodId, Object target, Object[] args);
}
